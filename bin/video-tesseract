#!/usr/bin/env ruby

require 'optparse'
require 'mkmf'
require 'tmpdir'

@tile_width = 320
@tile_height = 180

@frame_rate = 23.976

@cols = 5
@rows = 5

@input = nil
@output = 'tesseract.mp4'

@verbose = false

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: tesseract [options]"

  opts.on('-i', '--input [input.mp4]', 'Path to input video (Required)') do |i|
    @input = i
  end

  opts.on('-o', '--output [tesseract.mp4]', 'Path to write output tesseracted video (Defaults to tesseract.mp4)') do |o|
    @output = o
  end

  opts.on('-s', '--size [<width>x<height>]', 'Tile size in pixels (Defaults to 320x180)') do |s|
    @tile_width, @tile_height = s.split('x').map(&:to_i)
  end

  opts.on('-g', '--grid [<columns>x<rows>]', 'Tesseract grid layout (Defaults to 5x5)') do |g|
    @cols, @rows = g.split('x').map(&:to_i)
  end

  opts.on('-r', '--frame-rate [23.976]', 'Frame rate of the tesseracted video (Defaults to 23.976)') do |r|
    @frame_rate = r.to_f
  end

  opts.on('-v', '--[no-]verbose', 'Run verbosely') do |v|
    @verbose = v
  end

  opts.on('-h', '--help', 'Prints help') do
    puts opts
    exit
  end
end

optparse.parse!


# Make sure we have @input
if @input.nil? || !File.exist?(@input)
  puts 'Missing or invalid input video file (--input)'
  puts ''
  puts optparse
  abort
end

# Make sure we have ffmpeg and imagemagick installed
unless find_executable('ffmpeg')
  puts 'Cannot find ffmpeg executable. Make sure you have FFmpeg installed.'
  abort
end

unless find_executable('convert')
  puts 'Cannot find convert executable. Make sure you have ImageMagick installed.'
  abort
end

Dir.mktmpdir do |data_dir|

  # get the frame count for the video
  probe = `ffmpeg -i #{@input} -vcodec copy -acodec copy -f null /dev/null 2>&1`
  if probe =~ /frame=.*?(\d+)/
    frames = $1.to_i
  else
    puts 'Cannot determine the number of frames in the video'
    abort
  end

  tiles = @rows * @cols
  frames_per_tile = frames / tiles
  tesseract_width = @tile_width * @cols
  tesseract_height = @tile_height * @rows



  puts ''
  puts "Generating #{@cols}x#{@rows} tesseract with tile size #{@tile_width}x#{@tile_height}"
  puts "Tesseract video will be #{tesseract_width}x#{tesseract_height} with a duration of #{frames_per_tile} frames."
  puts ''



  #
  # Step 1: Extract all frames from the video
  #
  # Note: Skip this step if the we already have the frames extracted.

  print "Extracting all frames of the video ... "
  `ffmpeg -y -i #{@input} -vcodec png -s #{@tile_width}x#{@tile_height} -an -y #{data_dir}/frame_%d.png #{'2>&1' unless @verbose}`
  puts 'done'



  #
  # Step 2: Creating the montages from the frames
  #
  (1..frames_per_tile).each do |offset|

    images = (offset..frames).step(frames_per_tile).map { |idx| "#{data_dir}/frame_#{idx}.png" }[0...tiles]

    # how much to move each frame to the left as time goes on
    x_shift = (offset / frames_per_tile.to_f) * @tile_width

    cmd = "convert -size #{tesseract_width}x#{tesseract_height} xc:black "
    images.each_with_index do |image, idx|
      x_offset = (idx % @cols) * @tile_width + x_shift
      y_offset = (idx / @cols) * @tile_height
      cmd << "#{image} -geometry +#{x_offset}+#{y_offset} -composite "

      # if it's the last image in the row, repeat it in the row below to the left
      # of the first image for that row
      if idx % @cols == @cols - 1
        x_offset = ((idx + 1) % @cols) * @tile_width + x_shift - @tile_width
        y_offset = ((idx + 1) / @cols) * @tile_height
        cmd << "#{image} -geometry +#{x_offset}+#{y_offset} -composite "
      end
    end

    cmd << "#{data_dir}/montage_#{offset}.png"

    if @verbose
      puts cmd
      puts ''
    end

    print "Generating montage #{offset}/#{frames_per_tile}\r"
    $stdout.flush

    system(cmd)

  end
  puts "Generated all #{frames_per_tile} montages."



  #
  # Step 3: Creating the tesseracted video from the montages
  #

  print "Generating final tesseracted video: #{@output} ... "
  `ffmpeg -y -framerate #{@frame_rate} -i #{data_dir}/montage_%d.png -c:v libx264 -r #{@frame_rate} -pix_fmt yuv420p #{@output} #{'2>&1' unless @verbose}`
  puts 'done'

end
